package editortrees;

import editortrees.Node.Code;

// A height-balanced binary tree with rank that could be the basis for a text editor.

public class EditTree {

	private Node root;
	private int rotationCount;
	protected static final Node NULL_NODE = new Node();
	private Node newNode = NULL_NODE;

	/**
	 * Construct an empty tree
	 */
	public EditTree() {
		this.root = NULL_NODE;
		this.rotationCount = 0;

	}

	/**
	 * Construct a single-node tree whose element is c
	 * 
	 * @param c
	 */
	public EditTree(char c) {
		this.root = new Node(c);
		this.rotationCount = 0;
	}

	/**
	 * Create an EditTree whose toString is s. This can be done in O(N) time,
	 * where N is the length of the tree (repeatedly calling insert() would be
	 * O(N log N), so you need to find a more efficient way to do this.
	 * 
	 * @param s
	 */
	public EditTree(String s) {

	}

	/**
	 * Make this tree be a copy of e, with all new nodes, but the same shape and
	 * contents.
	 * 
	 * @param e
	 */
	public EditTree(EditTree e) {
		this.root = copyTree(e.root, null);
	}

	private Node copyTree(Node copyNode, Node parentNode) {
		Node currentNode = NULL_NODE;
		Node leftNode = NULL_NODE;
		Node rightNode = NULL_NODE;
		if (copyNode != NULL_NODE) {
			currentNode = new Node(copyNode.element, parentNode);
			currentNode.balance = copyNode.balance;
			currentNode.rank = copyNode.rank;
			leftNode = copyTree(copyNode.left, currentNode);
			rightNode = copyTree(copyNode.right, currentNode);
			currentNode.left = leftNode;
			currentNode.right = rightNode;
		}

		return currentNode;
	}

	/**
	 * 
	 * @return the height of this tree
	 */
	public int height() {
		return this.root.height();
	}

	/**
	 * 
	 * returns the total number of rotations done in this tree since it was
	 * created. A double rotation counts as two.
	 * 
	 * @return number of rotations since tree was created.
	 */
	public int totalRotationCount() {
		return this.rotationCount;
	}

	/**
	 * return the string produced by an inorder traversal of this tree
	 */
	@Override
	public String toString() {
		return this.root.toString();

	}

	/**
	 * 
	 * @param pos
	 *            position in the tree
	 * @return the character at that position
	 * @throws IndexOutOfBoundsException
	 */
	public char get(int pos) throws IndexOutOfBoundsException {
		if (pos >= this.size() || pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		return getNode(pos, this.root).element;
	}

	public Node getNode(int pos, Node node) {
		if (pos == node.rank) {
			return node;
		}
		if (pos > node.rank) {
			pos = pos - node.rank - 1;
			return getNode(pos, node.right);
		} else {
			return getNode(pos, node.left);
		}
	}

	/**
	 * 
	 * @param c
	 *            character to add to the end of this tree.
	 */
	public void add(char c) {
		Node node = this.root;
		if (node != EditTree.NULL_NODE) {
			while (node.right != EditTree.NULL_NODE) {
				node = node.right;
			}
			this.newNode = new Node(c, node);
			node.right = this.newNode;
		} else {
			this.newNode = new Node(c);
			this.root = this.newNode;
		}
		checkAndRotate(this.newNode);
	}

	private void checkAndRotate(Node node) {
		Code parentDirection = Code.SAME;
		Code childDirection = Code.SAME;
		while (node.parent != null) {
			childDirection = parentDirection;
			if (node.parent.right == node) {
				parentDirection = Code.RIGHT;
			} else if (node.parent.left == node) {
				parentDirection = Code.LEFT;
			}
			if (node.parent.balance == Code.LEFT
					&& parentDirection == Code.RIGHT) {
				node.parent.balance = Code.SAME;
				break;
			} else if (node.parent.balance == Code.LEFT
					&& parentDirection == Code.LEFT) {
				rotate(node, parentDirection, childDirection);
				break;
			} else if (node.parent.balance == Code.RIGHT
					&& parentDirection == Code.LEFT) {
				node.parent.balance = Code.SAME;
				break;
			} else if (node.parent.balance == Code.RIGHT
					&& parentDirection == Code.RIGHT) {
				rotate(node, parentDirection, childDirection);
				break;
			} else if (node.parent.balance == Code.SAME) {
				node.parent.balance = parentDirection;
			}
			node = node.parent;
		}
	}

	/*
	 * node = the child of imbalanced node
	 */
	private Node singleLeft(Node node) {
		node.parent.right = node.left;
		if (node.left != NULL_NODE) {
			node.left.parent = node.parent;
		}
		node.left = node.parent;
		node.parent = node.left.parent;
		node.left.parent = node;
		if (node.parent != null) {
			if (node.parent.left == node.left) {
				node.parent.left = node;
			} else if (node.parent.right == node.left) {
				node.parent.right = node;
			}
		} else {
			this.root = node;
		}
		node.rank = node.rank + node.left.rank + 1;
		this.rotationCount++;
		return node;
	}

	private Node singleRight(Node node) {
		node.parent.left = node.right;
		if (node.right != NULL_NODE) {
			node.right.parent = node.parent;
		}
		node.right = node.parent;
		node.parent = node.right.parent;
		node.right.parent = node;
		if (node.parent != null) {
			if (node.parent.right == node.right) {
				node.parent.right = node;
			} else if (node.parent.left == node.right) {
				node.parent.left = node;
			}
		} else {
			this.root = node;
		}
		node.right.rank = node.right.rank - node.rank - 1;
		this.rotationCount++;
		return node;
	}

	private void rotate(Node node, Code parentDirection, Code childDirection) {
		if (parentDirection == Code.LEFT && childDirection == Code.LEFT) {
			singleRight(node);
			node.right.balance = Code.SAME;
			node.balance = Code.SAME;
		} else if (parentDirection == Code.RIGHT
				&& childDirection == Code.RIGHT) {
			singleLeft(node);
			node.left.balance = Code.SAME;
			node.balance = Code.SAME;
		} else if (parentDirection == Code.LEFT && childDirection == Code.RIGHT) {
			singleLeft(node.right);
			singleRight(node.parent);
			node.parent.balance = Code.SAME;
			if (node.parent.right.left.height() > node.parent.right.right
					.height()) {
				node.parent.right.balance = Code.LEFT;
			} else if (node.parent.right.left.height() < node.parent.right.right
					.height()) {
				node.parent.right.balance = Code.RIGHT;
			} else {
				node.parent.right.balance = Code.SAME;
			}
			if (node.left.height() > node.right.height()) {
				node.balance = Code.LEFT;
			} else if (node.left.height() < node.right.height()) {
				node.balance = Code.RIGHT;
			} else {
				node.balance = Code.SAME;
			}
		} else {
			singleRight(node.left);
			singleLeft(node.parent);
			node.parent.balance = Code.SAME;
			if (node.parent.left.left.height() > node.parent.left.right
					.height()) {
				node.parent.left.balance = Code.LEFT;
			} else if (node.parent.left.left.height() < node.parent.left.right
					.height()) {
				node.parent.left.balance = Code.RIGHT;
			} else {
				node.parent.left.balance = Code.SAME;
			}
			if (node.left.height() > node.right.height()) {
				node.balance = Code.LEFT;
			} else if (node.left.height() < node.right.height()) {
				node.balance = Code.RIGHT;
			} else {
				node.balance = Code.SAME;
			}
		}
	}

	/**
	 * 
	 * @param c
	 *            character to add
	 * @param pos
	 *            character added in this inorder position
	 * @throws IndexOutOfBoundsException
	 *             id pos is negative or too large for this tree
	 */
	public void add(char c, int pos) throws IndexOutOfBoundsException {
		if (pos > this.size() || pos < 0) {
			throw new IndexOutOfBoundsException();
		}
		this.root = addNode(c, pos, this.root, null);
		checkAndRotate(this.newNode);

	}

	public Node addNode(char c, int pos, Node currentNode, Node parent) {

		if (currentNode == NULL_NODE) {
			this.newNode = new Node(c, parent);
			return this.newNode;
		}
		if (pos <= currentNode.rank) {
			currentNode.rank++;
			currentNode.left = addNode(c, pos, currentNode.left, currentNode);
		} else {
			pos = pos - currentNode.rank - 1;
			currentNode.right = addNode(c, pos, currentNode.right, currentNode);
		}
		return currentNode;
	}

	/**
	 * 
	 * @return the number of nodes in this tree
	 */
	public int size() {
		Node currentNode = this.root;
		int size = 0;
		while (currentNode != NULL_NODE) {
			size = size + currentNode.rank + 1;
			currentNode = currentNode.right;
		}
		return size;
	}

	/**
	 * 
	 * @param pos
	 *            position of character to delete from this tree
	 * @return the character that is deleted
	 * @throws IndexOutOfBoundsException
	 */
	public char delete(int pos) throws IndexOutOfBoundsException {
		// Implementation requirement:
		// When deleting a node with two children, you normally replace the
		// node to be deleted with either its in-order successor or predecessor.
		// The tests assume assume that you will replace it with the
		// *successor*.
		return '#'; // replace by a real calculation.
	}

	/**
	 * This method operates in O(length*log N), where N is the size of this
	 * tree.
	 * 
	 * @param pos
	 *            location of the beginning of the string to retrieve
	 * @param length
	 *            length of the string to retrieve
	 * @return string of length that starts in position pos
	 * @throws IndexOutOfBoundsException
	 *             unless both pos and pos+length-1 are legitimate indexes
	 *             within this tree.
	 */
	public String get(int pos, int length) throws IndexOutOfBoundsException {
		return "";
	}

	/**
	 * This method is provided for you, and should not need to be changed. If
	 * split() and concatenate() are O(log N) operations as required, delete
	 * should also be O(log N)
	 * 
	 * @param start
	 *            position of beginning of string to delete
	 * 
	 * @param length
	 *            length of string to delete
	 * @return an EditTree containing the deleted string
	 * @throws IndexOutOfBoundsException
	 *             unless both start and start+length-1 are in range for this
	 *             tree.
	 */
	public EditTree delete(int start, int length)
			throws IndexOutOfBoundsException {
		if (start < 0 || start + length >= this.size())
			throw new IndexOutOfBoundsException(
					(start < 0) ? "negative first argument to delete"
							: "delete range extends past end of string");
		EditTree t2 = this.split(start);
		EditTree t3 = t2.split(length);
		this.concatenate(t3);
		return t2;
	}

	/**
	 * Append (in time proportional to the log of the size of the larger tree)
	 * the contents of the other tree to this one. Other should be made empty
	 * after this operation.
	 * 
	 * @param other
	 * @throws IllegalArgumentException
	 *             if this == other
	 */
	public void concatenate(EditTree other) throws IllegalArgumentException {

	}

	/**
	 * This operation must be done in time proportional to the height of this
	 * tree.
	 * 
	 * @param pos
	 *            where to split this tree
	 * @return a new tree containing all of the elements of this tree whose
	 *         positions are >= position. Their nodes are removed from this
	 *         tree.
	 * @throws IndexOutOfBoundsException
	 */
	public EditTree split(int pos) throws IndexOutOfBoundsException {
		return null; // replace by a real calculation.
	}

	/**
	 * Don't worry if you can't do this one efficiently.
	 * 
	 * @param s
	 *            the string to look for
	 * @return the position in this tree of the first occurrence of s; -1 if s
	 *         does not occur
	 */
	public int find(String s) {
		return -2;
	}

	/**
	 * 
	 * @param s
	 *            the string to search for
	 * @param pos
	 *            the position in the tree to begin the search
	 * @return the position in this tree of the first occurrence of s that does
	 *         not occur before position pos; -1 if s does not occur
	 */
	public int find(String s, int pos) {
		return -2;
	}

	/**
	 * @return The root of this tree.
	 */
	public Node getRoot() {
		return this.root;
	}
}
